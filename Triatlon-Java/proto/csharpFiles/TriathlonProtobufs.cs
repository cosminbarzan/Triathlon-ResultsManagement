// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: triathlon.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from triathlon.proto</summary>
public static partial class TriathlonReflection {

  #region Descriptor
  /// <summary>File descriptor for triathlon.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static TriathlonReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg90cmlhdGhsb24ucHJvdG8ibwoHVXNlckRUTxIKCgJpZBgBIAEoAxIRCglm",
          "aXJzdE5hbWUYAiABKAkSEAoIbGFzdE5hbWUYAyABKAkSEAoIdXNlcm5hbWUY",
          "BCABKAkSEAoIcGFzc3dvcmQYBSABKAkSDwoHaWRTdGFnZRgGIAEoAyJCCglS",
          "ZXN1bHREVE8SFQoNcGFydGljaXBhbnRJZBgBIAEoAxIPCgdzdGFnZUlkGAIg",
          "ASgDEg0KBXNjb3JlGAMgASgBIjIKC1BhcnRpY2lwYW50EhEKCWZpcnN0TmFt",
          "ZRgBIAEoCRIQCghsYXN0TmFtZRgCIAEoCSJQCg5QYXJ0aWNpcGFudERUTxIK",
          "CgJpZBgBIAEoAxIRCglmaXJzdE5hbWUYAiABKAkSEAoIbGFzdE5hbWUYAyAB",
          "KAkSDQoFc2NvcmUYBCABKAEihgIKB1JlcXVlc3QSIgoEdHlwZRgBIAEoDjIU",
          "LlJlcXVlc3QuUmVxdWVzdFR5cGUSGAoEdXNlchgCIAEoCzIILlVzZXJEVE9I",
          "ABIcCgZyZXN1bHQYAyABKAsyCi5SZXN1bHREVE9IABIRCgdpZFN0YWdlGAQg",
          "ASgDSAAigAEKC1JlcXVlc3RUeXBlEgsKB1Vua25vd24QABIJCgVMT0dJThAB",
          "EgoKBkxPR09VVBACEh0KGUdFVF9QQVJUSUNJUEFOVFNfQllfU0NPUkUQAxIe",
          "ChpHRVRfUEFSVElDSVBBTlRTX0FORF9TQ09SRRAEEg4KCkFERF9SRVNVTFQQ",
          "BUIJCgdwYXlsb2FkIsACCghSZXNwb25zZRIkCgR0eXBlGAEgASgOMhYuUmVz",
          "cG9uc2UuUmVzcG9uc2VUeXBlEg0KBWVycm9yGAIgASgJEhoKBnJlc3VsdBgD",
          "IAEoCzIKLlJlc3VsdERUTxIWCgR1c2VyGAQgASgLMgguVXNlckRUTxIiCgxw",
          "YXJ0aWNpcGFudHMYBSADKAsyDC5QYXJ0aWNpcGFudBIoCg9wYXJ0aWNpcGFu",
          "dHNEVE8YBiADKAsyDy5QYXJ0aWNpcGFudERUTyJ9CgxSZXNwb25zZVR5cGUS",
          "CwoHVW5rbm93bhAAEgYKAk9LEAESCQoFRVJST1IQAhIOCgpORVdfUkVTVUxU",
          "EAMSHQoZR0VUX1BBUlRJQ0lQQU5UU19CWV9TQ09SRRAEEh4KGkdFVF9QQVJU",
          "SUNJUEFOVFNfQU5EX1NDT1JFEAVCFEISVHJpYXRobG9uUHJvdG9idWZzYgZw",
          "cm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::UserDTO), global::UserDTO.Parser, new[]{ "Id", "FirstName", "LastName", "Username", "Password", "IdStage" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ResultDTO), global::ResultDTO.Parser, new[]{ "ParticipantId", "StageId", "Score" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Participant), global::Participant.Parser, new[]{ "FirstName", "LastName" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ParticipantDTO), global::ParticipantDTO.Parser, new[]{ "Id", "FirstName", "LastName", "Score" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Request), global::Request.Parser, new[]{ "Type", "User", "Result", "IdStage" }, new[]{ "Payload" }, new[]{ typeof(global::Request.Types.RequestType) }, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Response), global::Response.Parser, new[]{ "Type", "Error", "Result", "User", "Participants", "ParticipantsDTO" }, null, new[]{ typeof(global::Response.Types.ResponseType) }, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class UserDTO : pb::IMessage<UserDTO> {
  private static readonly pb::MessageParser<UserDTO> _parser = new pb::MessageParser<UserDTO>(() => new UserDTO());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UserDTO> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TriathlonReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserDTO() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserDTO(UserDTO other) : this() {
    id_ = other.id_;
    firstName_ = other.firstName_;
    lastName_ = other.lastName_;
    username_ = other.username_;
    password_ = other.password_;
    idStage_ = other.idStage_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserDTO Clone() {
    return new UserDTO(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private long id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "firstName" field.</summary>
  public const int FirstNameFieldNumber = 2;
  private string firstName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string FirstName {
    get { return firstName_; }
    set {
      firstName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "lastName" field.</summary>
  public const int LastNameFieldNumber = 3;
  private string lastName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string LastName {
    get { return lastName_; }
    set {
      lastName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "username" field.</summary>
  public const int UsernameFieldNumber = 4;
  private string username_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Username {
    get { return username_; }
    set {
      username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "password" field.</summary>
  public const int PasswordFieldNumber = 5;
  private string password_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Password {
    get { return password_; }
    set {
      password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "idStage" field.</summary>
  public const int IdStageFieldNumber = 6;
  private long idStage_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long IdStage {
    get { return idStage_; }
    set {
      idStage_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UserDTO);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UserDTO other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (FirstName != other.FirstName) return false;
    if (LastName != other.LastName) return false;
    if (Username != other.Username) return false;
    if (Password != other.Password) return false;
    if (IdStage != other.IdStage) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0L) hash ^= Id.GetHashCode();
    if (FirstName.Length != 0) hash ^= FirstName.GetHashCode();
    if (LastName.Length != 0) hash ^= LastName.GetHashCode();
    if (Username.Length != 0) hash ^= Username.GetHashCode();
    if (Password.Length != 0) hash ^= Password.GetHashCode();
    if (IdStage != 0L) hash ^= IdStage.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(Id);
    }
    if (FirstName.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(FirstName);
    }
    if (LastName.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(LastName);
    }
    if (Username.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Username);
    }
    if (Password.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Password);
    }
    if (IdStage != 0L) {
      output.WriteRawTag(48);
      output.WriteInt64(IdStage);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
    }
    if (FirstName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(FirstName);
    }
    if (LastName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(LastName);
    }
    if (Username.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
    }
    if (Password.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
    }
    if (IdStage != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(IdStage);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UserDTO other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0L) {
      Id = other.Id;
    }
    if (other.FirstName.Length != 0) {
      FirstName = other.FirstName;
    }
    if (other.LastName.Length != 0) {
      LastName = other.LastName;
    }
    if (other.Username.Length != 0) {
      Username = other.Username;
    }
    if (other.Password.Length != 0) {
      Password = other.Password;
    }
    if (other.IdStage != 0L) {
      IdStage = other.IdStage;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt64();
          break;
        }
        case 18: {
          FirstName = input.ReadString();
          break;
        }
        case 26: {
          LastName = input.ReadString();
          break;
        }
        case 34: {
          Username = input.ReadString();
          break;
        }
        case 42: {
          Password = input.ReadString();
          break;
        }
        case 48: {
          IdStage = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class ResultDTO : pb::IMessage<ResultDTO> {
  private static readonly pb::MessageParser<ResultDTO> _parser = new pb::MessageParser<ResultDTO>(() => new ResultDTO());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ResultDTO> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TriathlonReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ResultDTO() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ResultDTO(ResultDTO other) : this() {
    participantId_ = other.participantId_;
    stageId_ = other.stageId_;
    score_ = other.score_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ResultDTO Clone() {
    return new ResultDTO(this);
  }

  /// <summary>Field number for the "participantId" field.</summary>
  public const int ParticipantIdFieldNumber = 1;
  private long participantId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ParticipantId {
    get { return participantId_; }
    set {
      participantId_ = value;
    }
  }

  /// <summary>Field number for the "stageId" field.</summary>
  public const int StageIdFieldNumber = 2;
  private long stageId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long StageId {
    get { return stageId_; }
    set {
      stageId_ = value;
    }
  }

  /// <summary>Field number for the "score" field.</summary>
  public const int ScoreFieldNumber = 3;
  private double score_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Score {
    get { return score_; }
    set {
      score_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ResultDTO);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ResultDTO other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ParticipantId != other.ParticipantId) return false;
    if (StageId != other.StageId) return false;
    if (Score != other.Score) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ParticipantId != 0L) hash ^= ParticipantId.GetHashCode();
    if (StageId != 0L) hash ^= StageId.GetHashCode();
    if (Score != 0D) hash ^= Score.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ParticipantId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(ParticipantId);
    }
    if (StageId != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(StageId);
    }
    if (Score != 0D) {
      output.WriteRawTag(25);
      output.WriteDouble(Score);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ParticipantId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ParticipantId);
    }
    if (StageId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(StageId);
    }
    if (Score != 0D) {
      size += 1 + 8;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ResultDTO other) {
    if (other == null) {
      return;
    }
    if (other.ParticipantId != 0L) {
      ParticipantId = other.ParticipantId;
    }
    if (other.StageId != 0L) {
      StageId = other.StageId;
    }
    if (other.Score != 0D) {
      Score = other.Score;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          ParticipantId = input.ReadInt64();
          break;
        }
        case 16: {
          StageId = input.ReadInt64();
          break;
        }
        case 25: {
          Score = input.ReadDouble();
          break;
        }
      }
    }
  }

}

public sealed partial class Participant : pb::IMessage<Participant> {
  private static readonly pb::MessageParser<Participant> _parser = new pb::MessageParser<Participant>(() => new Participant());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Participant> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TriathlonReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Participant() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Participant(Participant other) : this() {
    firstName_ = other.firstName_;
    lastName_ = other.lastName_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Participant Clone() {
    return new Participant(this);
  }

  /// <summary>Field number for the "firstName" field.</summary>
  public const int FirstNameFieldNumber = 1;
  private string firstName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string FirstName {
    get { return firstName_; }
    set {
      firstName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "lastName" field.</summary>
  public const int LastNameFieldNumber = 2;
  private string lastName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string LastName {
    get { return lastName_; }
    set {
      lastName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Participant);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Participant other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (FirstName != other.FirstName) return false;
    if (LastName != other.LastName) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (FirstName.Length != 0) hash ^= FirstName.GetHashCode();
    if (LastName.Length != 0) hash ^= LastName.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (FirstName.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(FirstName);
    }
    if (LastName.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(LastName);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (FirstName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(FirstName);
    }
    if (LastName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(LastName);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Participant other) {
    if (other == null) {
      return;
    }
    if (other.FirstName.Length != 0) {
      FirstName = other.FirstName;
    }
    if (other.LastName.Length != 0) {
      LastName = other.LastName;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          FirstName = input.ReadString();
          break;
        }
        case 18: {
          LastName = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class ParticipantDTO : pb::IMessage<ParticipantDTO> {
  private static readonly pb::MessageParser<ParticipantDTO> _parser = new pb::MessageParser<ParticipantDTO>(() => new ParticipantDTO());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ParticipantDTO> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TriathlonReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ParticipantDTO() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ParticipantDTO(ParticipantDTO other) : this() {
    id_ = other.id_;
    firstName_ = other.firstName_;
    lastName_ = other.lastName_;
    score_ = other.score_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ParticipantDTO Clone() {
    return new ParticipantDTO(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private long id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "firstName" field.</summary>
  public const int FirstNameFieldNumber = 2;
  private string firstName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string FirstName {
    get { return firstName_; }
    set {
      firstName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "lastName" field.</summary>
  public const int LastNameFieldNumber = 3;
  private string lastName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string LastName {
    get { return lastName_; }
    set {
      lastName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "score" field.</summary>
  public const int ScoreFieldNumber = 4;
  private double score_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Score {
    get { return score_; }
    set {
      score_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ParticipantDTO);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ParticipantDTO other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (FirstName != other.FirstName) return false;
    if (LastName != other.LastName) return false;
    if (Score != other.Score) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0L) hash ^= Id.GetHashCode();
    if (FirstName.Length != 0) hash ^= FirstName.GetHashCode();
    if (LastName.Length != 0) hash ^= LastName.GetHashCode();
    if (Score != 0D) hash ^= Score.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(Id);
    }
    if (FirstName.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(FirstName);
    }
    if (LastName.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(LastName);
    }
    if (Score != 0D) {
      output.WriteRawTag(33);
      output.WriteDouble(Score);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
    }
    if (FirstName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(FirstName);
    }
    if (LastName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(LastName);
    }
    if (Score != 0D) {
      size += 1 + 8;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ParticipantDTO other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0L) {
      Id = other.Id;
    }
    if (other.FirstName.Length != 0) {
      FirstName = other.FirstName;
    }
    if (other.LastName.Length != 0) {
      LastName = other.LastName;
    }
    if (other.Score != 0D) {
      Score = other.Score;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt64();
          break;
        }
        case 18: {
          FirstName = input.ReadString();
          break;
        }
        case 26: {
          LastName = input.ReadString();
          break;
        }
        case 33: {
          Score = input.ReadDouble();
          break;
        }
      }
    }
  }

}

public sealed partial class Request : pb::IMessage<Request> {
  private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Request> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TriathlonReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Request() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Request(Request other) : this() {
    type_ = other.type_;
    switch (other.PayloadCase) {
      case PayloadOneofCase.User:
        User = other.User.Clone();
        break;
      case PayloadOneofCase.Result:
        Result = other.Result.Clone();
        break;
      case PayloadOneofCase.IdStage:
        IdStage = other.IdStage;
        break;
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Request Clone() {
    return new Request(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private global::Request.Types.RequestType type_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Request.Types.RequestType Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "user" field.</summary>
  public const int UserFieldNumber = 2;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::UserDTO User {
    get { return payloadCase_ == PayloadOneofCase.User ? (global::UserDTO) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.User;
    }
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 3;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResultDTO Result {
    get { return payloadCase_ == PayloadOneofCase.Result ? (global::ResultDTO) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Result;
    }
  }

  /// <summary>Field number for the "idStage" field.</summary>
  public const int IdStageFieldNumber = 4;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long IdStage {
    get { return payloadCase_ == PayloadOneofCase.IdStage ? (long) payload_ : 0L; }
    set {
      payload_ = value;
      payloadCase_ = PayloadOneofCase.IdStage;
    }
  }

  private object payload_;
  /// <summary>Enum of possible cases for the "payload" oneof.</summary>
  public enum PayloadOneofCase {
    None = 0,
    User = 2,
    Result = 3,
    IdStage = 4,
  }
  private PayloadOneofCase payloadCase_ = PayloadOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PayloadOneofCase PayloadCase {
    get { return payloadCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayload() {
    payloadCase_ = PayloadOneofCase.None;
    payload_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Request);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Request other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (!object.Equals(User, other.User)) return false;
    if (!object.Equals(Result, other.Result)) return false;
    if (IdStage != other.IdStage) return false;
    if (PayloadCase != other.PayloadCase) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.User) hash ^= User.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.Result) hash ^= Result.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.IdStage) hash ^= IdStage.GetHashCode();
    hash ^= (int) payloadCase_;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Type);
    }
    if (payloadCase_ == PayloadOneofCase.User) {
      output.WriteRawTag(18);
      output.WriteMessage(User);
    }
    if (payloadCase_ == PayloadOneofCase.Result) {
      output.WriteRawTag(26);
      output.WriteMessage(Result);
    }
    if (payloadCase_ == PayloadOneofCase.IdStage) {
      output.WriteRawTag(32);
      output.WriteInt64(IdStage);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (payloadCase_ == PayloadOneofCase.User) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
    }
    if (payloadCase_ == PayloadOneofCase.Result) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
    }
    if (payloadCase_ == PayloadOneofCase.IdStage) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(IdStage);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Request other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    switch (other.PayloadCase) {
      case PayloadOneofCase.User:
        User = other.User;
        break;
      case PayloadOneofCase.Result:
        Result = other.Result;
        break;
      case PayloadOneofCase.IdStage:
        IdStage = other.IdStage;
        break;
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          type_ = (global::Request.Types.RequestType) input.ReadEnum();
          break;
        }
        case 18: {
          global::UserDTO subBuilder = new global::UserDTO();
          if (payloadCase_ == PayloadOneofCase.User) {
            subBuilder.MergeFrom(User);
          }
          input.ReadMessage(subBuilder);
          User = subBuilder;
          break;
        }
        case 26: {
          global::ResultDTO subBuilder = new global::ResultDTO();
          if (payloadCase_ == PayloadOneofCase.Result) {
            subBuilder.MergeFrom(Result);
          }
          input.ReadMessage(subBuilder);
          Result = subBuilder;
          break;
        }
        case 32: {
          IdStage = input.ReadInt64();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the Request message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum RequestType {
      [pbr::OriginalName("Unknown")] Unknown = 0,
      [pbr::OriginalName("LOGIN")] Login = 1,
      [pbr::OriginalName("LOGOUT")] Logout = 2,
      [pbr::OriginalName("GET_PARTICIPANTS_BY_SCORE")] GetParticipantsByScore = 3,
      [pbr::OriginalName("GET_PARTICIPANTS_AND_SCORE")] GetParticipantsAndScore = 4,
      [pbr::OriginalName("ADD_RESULT")] AddResult = 5,
    }

  }
  #endregion

}

public sealed partial class Response : pb::IMessage<Response> {
  private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Response> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TriathlonReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Response() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Response(Response other) : this() {
    type_ = other.type_;
    error_ = other.error_;
    Result = other.result_ != null ? other.Result.Clone() : null;
    User = other.user_ != null ? other.User.Clone() : null;
    participants_ = other.participants_.Clone();
    participantsDTO_ = other.participantsDTO_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Response Clone() {
    return new Response(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private global::Response.Types.ResponseType type_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Response.Types.ResponseType Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "error" field.</summary>
  public const int ErrorFieldNumber = 2;
  private string error_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Error {
    get { return error_; }
    set {
      error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 3;
  private global::ResultDTO result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResultDTO Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "user" field.</summary>
  public const int UserFieldNumber = 4;
  private global::UserDTO user_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::UserDTO User {
    get { return user_; }
    set {
      user_ = value;
    }
  }

  /// <summary>Field number for the "participants" field.</summary>
  public const int ParticipantsFieldNumber = 5;
  private static readonly pb::FieldCodec<global::Participant> _repeated_participants_codec
      = pb::FieldCodec.ForMessage(42, global::Participant.Parser);
  private readonly pbc::RepeatedField<global::Participant> participants_ = new pbc::RepeatedField<global::Participant>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Participant> Participants {
    get { return participants_; }
  }

  /// <summary>Field number for the "participantsDTO" field.</summary>
  public const int ParticipantsDTOFieldNumber = 6;
  private static readonly pb::FieldCodec<global::ParticipantDTO> _repeated_participantsDTO_codec
      = pb::FieldCodec.ForMessage(50, global::ParticipantDTO.Parser);
  private readonly pbc::RepeatedField<global::ParticipantDTO> participantsDTO_ = new pbc::RepeatedField<global::ParticipantDTO>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ParticipantDTO> ParticipantsDTO {
    get { return participantsDTO_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Response);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Response other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (Error != other.Error) return false;
    if (!object.Equals(Result, other.Result)) return false;
    if (!object.Equals(User, other.User)) return false;
    if(!participants_.Equals(other.participants_)) return false;
    if(!participantsDTO_.Equals(other.participantsDTO_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    if (Error.Length != 0) hash ^= Error.GetHashCode();
    if (result_ != null) hash ^= Result.GetHashCode();
    if (user_ != null) hash ^= User.GetHashCode();
    hash ^= participants_.GetHashCode();
    hash ^= participantsDTO_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Type);
    }
    if (Error.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Error);
    }
    if (result_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Result);
    }
    if (user_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(User);
    }
    participants_.WriteTo(output, _repeated_participants_codec);
    participantsDTO_.WriteTo(output, _repeated_participantsDTO_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (Error.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
    }
    if (result_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
    }
    if (user_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
    }
    size += participants_.CalculateSize(_repeated_participants_codec);
    size += participantsDTO_.CalculateSize(_repeated_participantsDTO_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Response other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.Error.Length != 0) {
      Error = other.Error;
    }
    if (other.result_ != null) {
      if (result_ == null) {
        result_ = new global::ResultDTO();
      }
      Result.MergeFrom(other.Result);
    }
    if (other.user_ != null) {
      if (user_ == null) {
        user_ = new global::UserDTO();
      }
      User.MergeFrom(other.User);
    }
    participants_.Add(other.participants_);
    participantsDTO_.Add(other.participantsDTO_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          type_ = (global::Response.Types.ResponseType) input.ReadEnum();
          break;
        }
        case 18: {
          Error = input.ReadString();
          break;
        }
        case 26: {
          if (result_ == null) {
            result_ = new global::ResultDTO();
          }
          input.ReadMessage(result_);
          break;
        }
        case 34: {
          if (user_ == null) {
            user_ = new global::UserDTO();
          }
          input.ReadMessage(user_);
          break;
        }
        case 42: {
          participants_.AddEntriesFrom(input, _repeated_participants_codec);
          break;
        }
        case 50: {
          participantsDTO_.AddEntriesFrom(input, _repeated_participantsDTO_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the Response message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum ResponseType {
      [pbr::OriginalName("Unknown")] Unknown = 0,
      [pbr::OriginalName("OK")] Ok = 1,
      [pbr::OriginalName("ERROR")] Error = 2,
      [pbr::OriginalName("NEW_RESULT")] NewResult = 3,
      [pbr::OriginalName("GET_PARTICIPANTS_BY_SCORE")] GetParticipantsByScore = 4,
      [pbr::OriginalName("GET_PARTICIPANTS_AND_SCORE")] GetParticipantsAndScore = 5,
    }

  }
  #endregion

}

#endregion


#endregion Designer generated code